apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: {{ .Values.namespace }}
data:
  update-node.sh: |
    #!/bin/sh
    REDIS_NODES="/data/nodes.conf"
    sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
    exec "$@"
  redis.conf: |+
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-client
provisioner: example.com/nfs
parameters:
  archiveOnDelete: "false"

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  nfs:
    path: /mnt/nfs_share
    server: 10.134.34.212

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-pvc
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: {{ .Values.namespace }}
spec:
  serviceName: "redis-cluster"
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: nfs-storage
          mountPath: /data
        - name: conf
          mountPath: /conf
      volumes:
      - name: nfs-storage
        persistentVolumeClaim:
        claimName: nfs-dynamic-pvc
      - name: conf
        configMap:
          name: redis-cluster-config
          defaultMode: 0755
---

apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-lb
  namespace: {{ .Values.namespace }}
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: 6379
      protocol: TCP
      name: redis
    - port: 8081
      targetPort: 16379
      protocol: TCP
      name: gossip
  selector:
    app: redis-cluster

